= Parfait
== What is Parfait?

Parfait uses layers to simplify the creation and maintenance of your automated browser test suite.  

A typical automated test suite can be broken down into layers:

* A <b>workflow layer</b> on top, which dictates the user's path through the application.  Think in terms of verbs and user stories: "As a user, when I login, I expect to be taken to my home page."  The workflow layer cares about user actions and results, not about the mechanics of entering data into the browser.
* A <b>control layer</b> beneath, which defines the specific interactions between the user and the web page.  This control layer would be implemented in your favorite browser automation tool, e.g. Selenium, Watir, etc.  The control layer cares only about getting data into and out of specific fields on specific pages.

Parfait provides a layer between the two, offering a set of basic test directives which are easy to call by the workflow layer and providing a simple infrastructure for creation and maintenance of the control layer beneath.  

== How does Parfait work?

At the control layer, Parfait allows you to define four basic objects: Applications, Pages, Regions, and Controls.

=== Applications

An Application is the top layer of the Parfait object hierarchy.  It is simply a collection of Pages.

=== Pages

A Page is a collection of Controls and Regions that are presented on the same screen.  This could be an actual page, or a panel on the screen that is used throughout the application.

=== Regions

A Region is a specific section on the screen.  Parfait does not require Regions to be defined, but they can be helpful when there are multiple similar controls on the screen, like in a list.

A Region can contain Controls or other Regions.

=== Controls

A Control is a single interaction point on a web page.  There can be data controls like links, text fields, and pulldown menus, as well as non-data controls like links and buttons.  All controls have a set of directives associated with them to enable easier implementation of your test automation.

==== Data Controls

Each data control is built around the two primary directives +get+ and +set+:

- +get+ - reads and returns the current value from the Control
- +set+ - uses the Control to set a new value.  

Once these primary directives are defined, Parfait puts them together to build the following directives for free:

- +retrieve+ - Reads and returns the current value from the Control.  Does not log anything.  (This is the user-callable version of +get+.)
- +update+ - Uses the Control to set a new value.  Logs the value of the Control both before and after the change for auditing purposes.
- +confirm+ - Tests the value of the Control, returning +true+ if the input matches the value of the Control and +false+ otherwise.  Does not log anything.
- +verify+  = Test the value of the Control, raising an exception if the input does not match the value of the Control.  Returns +true+ otherwise.  Logs successes for auditing purposes.

==== Non-Data Controls

Each non-data control is built upon a single +goto+ directive:

- +goto+ - selects or clicks the control to navigate elsewhere in the application

From this directive, a secondary +navigate+ directive is built:

- +navigate+ - uses the Control to navigate.  Logs its action.  (This is the user-callable version of +goto+.)

== How do I get started with Parfait?

The code examples used below are all from the Parfait repository in the +examples/example1+ directory.  In this directory, we will be automating control of the +index.html+ page.

Remember, Parfait breaks the code into two layers, so we'll define those layers in diferent files.  The workflow later will be defined in +demo.rb+, but let's start by using Parfait to define the control layer in +page.rb+.

=== Define a Page

Our first step is to define a page.  We'll name it "Sample Page" to match the name of the page we're controlling:

  # Define the Page
  sample_page = Parfait::Page.new(:name => "Sample Page")

Next we should add the page to our application:  

  # Add the page to our application
  sample_page.add_to_application("Sample App")

Since our application has not yet been defined, this call will actually create the Parfait::Application object under the covers.  This may seem a bit backward, but it allows a whole bunch of Parfait Page definitions to be pre-loaded in our test suite without having to worry about passing around an Application object.  We'll be able to get an instance of this object later on in the workflow layer.

=== Add some Controls

Our sample web page starts with a set of radio buttons.  A data control like this can be defined in three steps.

First, we create a Control object:

  ##################################################################
  # Define the party selection control
  ##################################################################
  party = Parfait::Control.new(:name => "Party", :logtext => "political party")

Next, we add this object to the Page:

  # Add our new control to the page
  party.add_to_page(sample_page)

Then we define +get+ and +set+ directives for the control.  For the +get+, no parameters are necessary and the code passed in should return the value of the control:

  # Define a "get" for the control
  party.add_get {
    retval = nil
    retval = Parfait::browser.div(:id => "radio-example").radio(:value => "Federalist").set? ? "Federalist" : retval
    retval = Parfait::browser.div(:id => "radio-example").radio(:value => "Republicrat").set? ? "Republicrat" : retval
    retval = Parfait::browser.div(:id => "radio-example").radio(:value => "Know-Nothing").set? ? "Know-Nothing" : retval
    retval
  }

For the +set+ directive, a single value is taken as input, followed by an optional hash.  In most cases, we can ignore the hash.

  # Define a "set" for the control
  party.add_set { |input|
    Parfait::browser.div(:id => "radio-example").radio(:value => input).set
  }

We also have a "Set My Party" button to add as a non-data Control.  Let's add that to our Page definition as well.  The difference with the non-data Control is that the only directive we set here is the +goto+ method:

  ##################################################################
  # Define the "Set My Party" control
  ##################################################################
  set_my_party = Parfait::Control.new(:name => "Set My Party", :logtext => "Set My Party button")
  
  # Add our new control to the page
  set_my_party.add_to_page(sample_page)
  
  # Define a "goto" this control
  set_my_party.add_goto {
    Parfait::browser.button(:value => "Set My Party").click
  }

=== Working with Regions

  ##################################################################
  # Define a Region to isolate information for a single president
  ##################################################################
  president_region = Parfait::Region.new(:name => "President")
  
  # Add this region to the page
  president_region.add_to_page(sample_page)
  
  # Define a filter so that this region will allow focus on a single entry
  president_region.add_filter { |president_name|
    table_rows = Parfait::browser.div(:id => "presidents").trs
    table_rows.each do |tr|
      if tr.text =~ /#{president_name}/
        Thread.current[:parfait_region] = tr
        break
      end
    end
    Thread.current[:parfait_region]
  }


=== Invoke the Workflow

To define the workflow layer, let's edit +scripts/edit_blog.rb+.  First we need to require the appropriate gems and start Watir up.

  require 'watir-webdriver'
  require 'parfait'
  
  browser = Watir::Browser.new
  browser.goto 'http://mysite.com/blog/new'
  
Next we'll invoke Parfait to fill in the fields and submit.

  Parfait.update(:onpage => "New Blog", :subject => "This is my subject")
  Parfait.update(:onpage => "New Blog", :body => "This is my body")
  Parfait.navigate(:onpage => "New Blog", :to => "Submit")

Then we can edit the page, verify that our data was correctly populated, and Cancel out:

  Parfait.navigate(:to => "Edit Post")
  Parfait.verify(:onpage => "New Blog", :subject => "This is my subject")
  Parfait.verify(:onpage => "New Blog", :body => "This is my body")
  Parfait.navigate(:onpage => "New Blog", :to => "Cancel")
 
More to come...

