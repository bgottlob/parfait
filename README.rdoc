= Parfait
== What is Parfait?

Parfait uses layers to simplify the creation and maintenance of your automated browser test suite.  

A typical automated test suite can be broken down into layers:

* A <b>workflow layer</b> on top, which dictates the user's path through the application.  Think in terms of verbs and user stories: "As a user, when I login, I expect to be taken to my home page."  The workflow layer cares about user actions and results, not about the mechanics of entering data into the browser.
* A <b>control layer</b> beneath, which defines the specific interactions between the user and the web page.  This control layer would be implemented in your favorite browser automation tool, e.g. Selenium, Watir, etc.  The control layer cares only about getting data into and out of specific fields on specific pages.

Parfait provides a layer between the two, offering a set of basic test directives which are easy to call by the workflow layer and providing a simple infrastructure for creation and maintenance of the control layer beneath.  

== How does Parfait work?

At the control layer, Parfait allows you to define four basic objects: Applications, Pages, Regions, and Controls.

=== Applications

An Application is the top layer of the Parfait object hierarchy.  It is simply a collection of Pages.

=== Pages

A Page is a collection of Controls and Regions that are presented on the same screen.  This could be an actual page, or a panel on the screen that is used throughout the application.

=== Regions

A Region is a specific section on the screen.  Parfait does not require Regions to be defined, but they can be helpful when there are multiple similar controls on the screen, like in a list.

A Region can contain Controls or other Regions.

=== Controls

A Control is a single interaction point on a web page.  There can be data controls like links, text fields, and pulldown menus, as well as non-data controls like links and buttons.  All controls have a set of directives associated with them to enable easier implementation of your test automation.

==== Data Controls

Each data control is built around the two primary directives +get+ and +set+:

- +get+ - reads and returns the current value from the Control
- +set+ - uses the Control to set a new value.  

Once these primary directives are defined, Parfait puts them together to build the following directives for free:

- +retrieve+ - Reads and returns the current value from the Control.  Does not log anything.  (This is the user-callable version of +get+.)
- +update+ - Uses the Control to set a new value.  Logs the value of the Control both before and after the change for auditing purposes.
- +confirm+ - Tests the value of the Control, returning +true+ if the input matches the value of the Control and +false+ otherwise.  Does not log anything.
- +verify+  = Test the value of the Control, raising an exception if the input does not match the value of the Control.  Returns +true+ otherwise.  Logs successes for auditing purposes.

==== Non-Data Controls

Each non-data control is built upon a single +goto+ directive:

- +goto+ - selects or clicks the control to navigate elsewhere in the application

From this directive, a secondary +navigate+ directive is built:

- +navigate+ - uses the Control to navigate.  Logs its action.  (This is the user-callable version of +goto+.)

== How do I get started with Parfait?

=== Define an Application

To get started with Parfait, first we have to define an Application.  As an example, let's work with a ficticious blogging application.

  # Define the application
  blogger = Parfait::Application.new(:name => "Blogger")

=== Define a Page

Next, let's define a Page.  As an example, let's define a page that creates or edits a blog post.  Note that we'll handle other setup (like requires) in the workflow code later.  We'll put the page information in file +pages/edit_post.rb+.

  # Define the page - we'll use an alias since this is used to 
  #   both add and edit
  edit_blog = Parfait::Page.new(
    :name => "Edit Post",
    :aliases => ["New Post"]
  )

=== Add some Controls

Next, we're going to define the navigation elements on the page.  On this page, the options are "Submit" and "Cancel" buttons.  Note that we're using Watir under the covers as we code the control layer.

  edit_blog.add_navigation { |opts|
    case opts[:to]

    when "Submit"
      Parfait.browser.button(:id => "submit").when_present.click

    when "Cancel"
      Parfait.browser.button(:id => "cancel").when_present.click

    else
      raise "Navigate called with an invalid destination \"#{o[:to]}\""
    end
  }

Now we need to add the basic controls on the page for entering a subject and a body.

  # Add the blog subject control to the Edit Blog page
  subject = edit_blog.add_control(
    :label => :subject,
    :text => "blog subject")
    
  subject.add_set{ |value|
    Parfait::browser().text_field(:id => "subject").when_present.set value
  }
  
  subject.add_get{ |opts|
    Parfait::browser.text_field(:id => "subject").when_present.value
  }
  
  # Add the blog body control to the Edit Blog page
  body = edit_blog.add_control(
    :label => :body,
    :text => "blog body")
    
  body.add_set{ |value|
    Parfait::browser().text_field(:id => "body").when_present.set value
  }
  
  body.add_get{ |opts|
    Parfait::browser.text_field(:id => "body").when_present.value
  }

That's all we need to define the Edit Blog page.  With +get+ and +set+ defined for each Control, Parfait will build +retrieve+, +update+, +confirm+, and +verify+ under the covers and these directives can all be invoked from the workflow layer.

=== Invoke the Workflow

To define the workflow layer, let's edit +scripts/edit_blog.rb+.  First we need to require the appropriate gems and start Watir up.

  require 'watir-webdriver'
  require 'parfait'
  
  browser = Watir::Browser.new
  browser.goto 'http://mysite.com/blog/new'
  
Next we'll invoke Parfait to fill in the fields and submit.

  Parfait.update(:onpage => "New Blog", :subject => "This is my subject")
  Parfait.update(:onpage => "New Blog", :body => "This is my body")
  Parfait.navigate(:onpage => "New Blog", :to => "Submit")

Then we can edit the page, verify that our data was correctly populated, and Cancel out:

  Parfait.navigate(:to => "Edit Post")
  Parfait.verify(:onpage => "New Blog", :subject => "This is my subject")
  Parfait.verify(:onpage => "New Blog", :body => "This is my body")
  Parfait.navigate(:onpage => "New Blog", :to => "Cancel")
 
More to come...

